------------------------------------------------------------------
DAY-III
------------------------------------------------------------------
Arithmetic operators:( *, / ,+ ,-, % )

print(10*4/6+3-1%2) 
o/p: 8.66

bitwise operators:( ~, &,^,| )

AND  OR:
print(10&4+3)
o/p: 2

print(7+2&4+3&9)
o/p: 1

print(10&4~2)
   o/p: invalid syntax
because negotion not valid between two numbers

print(~9+4&6)
o/p: 2

print(6|3&9+6)
o/p: 7

XOR:
>print(5^5)
o/p: 0
xor of number itself is zero
>print(4^0)
o/p: 4
xor of nyumber with zero is number it self
>print(5^5^5) ---->odd 1's(1)
O/P: 5
>print(5^5) ------>even 1's
o/p: 0
>print(7>>1) ---->right shift
o/p: 3
>print(10<<3) ----->left shift
o/p: 80
__________________________________________________________
 //
 def findSingle(ar,n):
                   res=ar[0]
                   #do xor of all elements and return
                   for i in range(1,n):
                         res=res^ar[i]
                   return res
  ar=[2,3,5,4,5,3,4,2,88]
  print(findSingle(ar,len(ar)))

o/p: 88
_________________________________________________________________
//swap two numbers using xor

a=100
b=200

print("a:",a,"b:",b)

a=a^b     
a=100^200
b=a^b     
a=100^200^200    # ans 200 200 cancelled b=100
a=a^b  
a=100^200^100  # ans 200 200 cancelled a=200
print("a:",a,"b:",b)

o/p: a=100 b=200
        a=200 b=100
_____________________________________________________________________
//for the given number n  find the xor of all numbers

n=12
xor=0
for i in range(1,n+1):
    xor=xor^i
print(xor)

o/p: 12
#O(n)

n=7
xor=0
if n%4==0
    print(n)
elif n%4==1
    print(1) 
elif n%4==2
    print(n+1) 
elif n%4==3
    print(0) 
above is O(1) no loop
_____________________________________________________________

For the given number n find out xor of all numbers
input:5
ans should be 1^2^3^4^5
output 1

n=12
xor=0
for i in range(1,n+1):
xor=xor^i
print(xor)

output:12
______________________________________________
#O(n)
#optimize
n=1 1
2  3
3  0
4  4
5  1 
6  7
7  0
8  8
9  1 

n=7
xor=0
if n%4==0:
   print(n)
elif n%4==1:
   print(1)
elif n%4==2:
   print(n+1)
elif n%4==3:
   print(0)
above is O(1) no loop
 
o/p:0
_______________________________________________________________

//find all the xor within the given range
  dont use loop getO(1)
from previous pattern we can find out 1 to any number from that figure 
4 to 9
xor(1 to 9)^xor(1 to 3)

_________________________________________________
// check number is odd or even 

normal way n%2==0 even else odd
fastest way using bitwise
n=13
if(n&1==0):
   print("Even")
else:
   print("odd")
 
o/p:odd

Explanation:every number is formed in ways of powers of 2
            thats why 2 ^0,1,2
___________________________________________________________________

//Fibanocci-ith term iterative 
n=int(input("enter the term:"))
n1=0
n2=1
if(n<0):
  print("not posssible")
else:
  for i in range(0,n-1)
      n3=n1+n2
      n1=n2
      n2=n3
print(n2)
_____________________________________________________________________

 